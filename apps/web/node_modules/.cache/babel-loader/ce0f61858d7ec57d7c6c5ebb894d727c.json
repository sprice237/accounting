{"ast":null,"code":"'use strict';\n\nconst defaultIsExtractableFile = require('./isExtractableFile.js');\n/**\n * Clones a value, recursively extracting\n * [`File`](https://developer.mozilla.org/en-US/docs/Web/API/File),\n * [`Blob`](https://developer.mozilla.org/en-US/docs/Web/API/Blob) and\n * [`ReactNativeFile`]{@link ReactNativeFile} instances with their\n * [object paths]{@link ObjectPath}, replacing them with `null`.\n * [`FileList`](https://developer.mozilla.org/en-US/docs/Web/API/Filelist) instances\n * are treated as [`File`](https://developer.mozilla.org/en-US/docs/Web/API/File)\n * instance arrays.\n * @kind function\n * @name extractFiles\n * @param {*} value Value (typically an object tree) to extract files from.\n * @param {ObjectPath} [path=''] Prefix for object paths for extracted files.\n * @param {ExtractableFileMatcher} [isExtractableFile=isExtractableFile] The function used to identify extractable files.\n * @returns {ExtractFilesResult} Result.\n * @example <caption>Ways to `import`.</caption>\n * ```js\n * import { extractFiles } from 'extract-files';\n * ```\n *\n * ```js\n * import extractFiles from 'extract-files/public/extractFiles.js';\n * ```\n * @example <caption>Ways to `require`.</caption>\n * ```js\n * const { extractFiles } = require('extract-files');\n * ```\n *\n * ```js\n * const extractFiles = require('extract-files/public/extractFiles.js');\n * ```\n * @example <caption>Extract files from an object.</caption>\n * For the following:\n *\n * ```js\n * const file1 = new File(['1'], '1.txt', { type: 'text/plain' });\n * const file2 = new File(['2'], '2.txt', { type: 'text/plain' });\n * const value = {\n *   a: file1,\n *   b: [file1, file2],\n * };\n *\n * const { clone, files } = extractFiles(value, 'prefix');\n * ```\n *\n * `value` remains the same.\n *\n * `clone` is:\n *\n * ```json\n * {\n *   \"a\": null,\n *   \"b\": [null, null]\n * }\n * ```\n *\n * `files` is a [`Map`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map) instance containing:\n *\n * | Key     | Value                        |\n * | :------ | :--------------------------- |\n * | `file1` | `['prefix.a', 'prefix.b.0']` |\n * | `file2` | `['prefix.b.1']`             |\n */\n\n\nmodule.exports = function extractFiles(value) {\n  let path = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n  let isExtractableFile = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : defaultIsExtractableFile;\n  // Map of extracted files and their object paths within the input value.\n  const files = new Map(); // Map of arrays and objects recursed within the input value and their clones,\n  // for reusing clones of values that are referenced multiple times within the\n  // input value.\n\n  const clones = new Map();\n  /**\n   * Recursively clones the value, extracting files.\n   * @kind function\n   * @name extractFiles~recurse\n   * @param {*} value Value to extract files from.\n   * @param {ObjectPath} path Prefix for object paths for extracted files.\n   * @param {Set} recursed Recursed arrays and objects for avoiding infinite recursion of circular references within the input value.\n   * @returns {*} Clone of the value with files replaced with `null`.\n   * @ignore\n   */\n\n  function recurse(value, path, recursed) {\n    let clone = value;\n\n    if (isExtractableFile(value)) {\n      clone = null;\n      const filePaths = files.get(value);\n      filePaths ? filePaths.push(path) : files.set(value, [path]);\n    } else {\n      const isList = Array.isArray(value) || typeof FileList !== 'undefined' && value instanceof FileList;\n      const isObject = value && value.constructor === Object;\n\n      if (isList || isObject) {\n        const hasClone = clones.has(value);\n        if (hasClone) clone = clones.get(value);else {\n          clone = isList ? [] : {};\n          clones.set(value, clone);\n        }\n\n        if (!recursed.has(value)) {\n          const pathPrefix = path ? `${path}.` : '';\n          const recursedDeeper = new Set(recursed).add(value);\n\n          if (isList) {\n            let index = 0;\n\n            for (const item of value) {\n              const itemClone = recurse(item, pathPrefix + index++, recursedDeeper);\n              if (!hasClone) clone.push(itemClone);\n            }\n          } else for (const key in value) {\n            const propertyClone = recurse(value[key], pathPrefix + key, recursedDeeper);\n            if (!hasClone) clone[key] = propertyClone;\n          }\n        }\n      }\n    }\n\n    return clone;\n  }\n\n  return {\n    clone: recurse(value, path, new Set()),\n    files\n  };\n};","map":{"version":3,"sources":["/home/sprice/Code/accounting/.yarn/cache/extract-files-npm-11.0.0-57df5d93a0-39ebd92772.zip/node_modules/extract-files/public/extractFiles.js"],"names":["defaultIsExtractableFile","require","module","exports","extractFiles","value","path","isExtractableFile","files","Map","clones","recurse","recursed","clone","filePaths","get","push","set","isList","Array","isArray","FileList","isObject","constructor","Object","hasClone","has","pathPrefix","recursedDeeper","Set","add","index","item","itemClone","key","propertyClone"],"mappings":"AAAA;;AAEA,MAAMA,wBAAwB,GAAGC,OAAO,CAAC,wBAAD,CAAxC;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAC,MAAM,CAACC,OAAP,GAAiB,SAASC,YAAT,CACfC,KADe,EAIf;AAAA,MAFAC,IAEA,uEAFO,EAEP;AAAA,MADAC,iBACA,uEADoBP,wBACpB;AACA;AACA,QAAMQ,KAAK,GAAG,IAAIC,GAAJ,EAAd,CAFA,CAIA;AACA;AACA;;AACA,QAAMC,MAAM,GAAG,IAAID,GAAJ,EAAf;AAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACE,WAASE,OAAT,CAAiBN,KAAjB,EAAwBC,IAAxB,EAA8BM,QAA9B,EAAwC;AACtC,QAAIC,KAAK,GAAGR,KAAZ;;AAEA,QAAIE,iBAAiB,CAACF,KAAD,CAArB,EAA8B;AAC5BQ,MAAAA,KAAK,GAAG,IAAR;AAEA,YAAMC,SAAS,GAAGN,KAAK,CAACO,GAAN,CAAUV,KAAV,CAAlB;AAEAS,MAAAA,SAAS,GAAGA,SAAS,CAACE,IAAV,CAAeV,IAAf,CAAH,GAA0BE,KAAK,CAACS,GAAN,CAAUZ,KAAV,EAAiB,CAACC,IAAD,CAAjB,CAAnC;AACD,KAND,MAMO;AACL,YAAMY,MAAM,GACVC,KAAK,CAACC,OAAN,CAAcf,KAAd,KACC,OAAOgB,QAAP,KAAoB,WAApB,IAAmChB,KAAK,YAAYgB,QAFvD;AAGA,YAAMC,QAAQ,GAAGjB,KAAK,IAAIA,KAAK,CAACkB,WAAN,KAAsBC,MAAhD;;AAEA,UAAIN,MAAM,IAAII,QAAd,EAAwB;AACtB,cAAMG,QAAQ,GAAGf,MAAM,CAACgB,GAAP,CAAWrB,KAAX,CAAjB;AAEA,YAAIoB,QAAJ,EAAcZ,KAAK,GAAGH,MAAM,CAACK,GAAP,CAAWV,KAAX,CAAR,CAAd,KACK;AACHQ,UAAAA,KAAK,GAAGK,MAAM,GAAG,EAAH,GAAQ,EAAtB;AAEAR,UAAAA,MAAM,CAACO,GAAP,CAAWZ,KAAX,EAAkBQ,KAAlB;AACD;;AAED,YAAI,CAACD,QAAQ,CAACc,GAAT,CAAarB,KAAb,CAAL,EAA0B;AACxB,gBAAMsB,UAAU,GAAGrB,IAAI,GAAI,GAAEA,IAAK,GAAX,GAAgB,EAAvC;AACA,gBAAMsB,cAAc,GAAG,IAAIC,GAAJ,CAAQjB,QAAR,EAAkBkB,GAAlB,CAAsBzB,KAAtB,CAAvB;;AAEA,cAAIa,MAAJ,EAAY;AACV,gBAAIa,KAAK,GAAG,CAAZ;;AAEA,iBAAK,MAAMC,IAAX,IAAmB3B,KAAnB,EAA0B;AACxB,oBAAM4B,SAAS,GAAGtB,OAAO,CACvBqB,IADuB,EAEvBL,UAAU,GAAGI,KAAK,EAFK,EAGvBH,cAHuB,CAAzB;AAMA,kBAAI,CAACH,QAAL,EAAeZ,KAAK,CAACG,IAAN,CAAWiB,SAAX;AAChB;AACF,WAZD,MAaE,KAAK,MAAMC,GAAX,IAAkB7B,KAAlB,EAAyB;AACvB,kBAAM8B,aAAa,GAAGxB,OAAO,CAC3BN,KAAK,CAAC6B,GAAD,CADsB,EAE3BP,UAAU,GAAGO,GAFc,EAG3BN,cAH2B,CAA7B;AAMA,gBAAI,CAACH,QAAL,EAAeZ,KAAK,CAACqB,GAAD,CAAL,GAAaC,aAAb;AAChB;AACJ;AACF;AACF;;AAED,WAAOtB,KAAP;AACD;;AAED,SAAO;AACLA,IAAAA,KAAK,EAAEF,OAAO,CAACN,KAAD,EAAQC,IAAR,EAAc,IAAIuB,GAAJ,EAAd,CADT;AAELrB,IAAAA;AAFK,GAAP;AAID,CArFD","sourcesContent":["'use strict';\n\nconst defaultIsExtractableFile = require('./isExtractableFile.js');\n\n/**\n * Clones a value, recursively extracting\n * [`File`](https://developer.mozilla.org/en-US/docs/Web/API/File),\n * [`Blob`](https://developer.mozilla.org/en-US/docs/Web/API/Blob) and\n * [`ReactNativeFile`]{@link ReactNativeFile} instances with their\n * [object paths]{@link ObjectPath}, replacing them with `null`.\n * [`FileList`](https://developer.mozilla.org/en-US/docs/Web/API/Filelist) instances\n * are treated as [`File`](https://developer.mozilla.org/en-US/docs/Web/API/File)\n * instance arrays.\n * @kind function\n * @name extractFiles\n * @param {*} value Value (typically an object tree) to extract files from.\n * @param {ObjectPath} [path=''] Prefix for object paths for extracted files.\n * @param {ExtractableFileMatcher} [isExtractableFile=isExtractableFile] The function used to identify extractable files.\n * @returns {ExtractFilesResult} Result.\n * @example <caption>Ways to `import`.</caption>\n * ```js\n * import { extractFiles } from 'extract-files';\n * ```\n *\n * ```js\n * import extractFiles from 'extract-files/public/extractFiles.js';\n * ```\n * @example <caption>Ways to `require`.</caption>\n * ```js\n * const { extractFiles } = require('extract-files');\n * ```\n *\n * ```js\n * const extractFiles = require('extract-files/public/extractFiles.js');\n * ```\n * @example <caption>Extract files from an object.</caption>\n * For the following:\n *\n * ```js\n * const file1 = new File(['1'], '1.txt', { type: 'text/plain' });\n * const file2 = new File(['2'], '2.txt', { type: 'text/plain' });\n * const value = {\n *   a: file1,\n *   b: [file1, file2],\n * };\n *\n * const { clone, files } = extractFiles(value, 'prefix');\n * ```\n *\n * `value` remains the same.\n *\n * `clone` is:\n *\n * ```json\n * {\n *   \"a\": null,\n *   \"b\": [null, null]\n * }\n * ```\n *\n * `files` is a [`Map`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map) instance containing:\n *\n * | Key     | Value                        |\n * | :------ | :--------------------------- |\n * | `file1` | `['prefix.a', 'prefix.b.0']` |\n * | `file2` | `['prefix.b.1']`             |\n */\nmodule.exports = function extractFiles(\n  value,\n  path = '',\n  isExtractableFile = defaultIsExtractableFile\n) {\n  // Map of extracted files and their object paths within the input value.\n  const files = new Map();\n\n  // Map of arrays and objects recursed within the input value and their clones,\n  // for reusing clones of values that are referenced multiple times within the\n  // input value.\n  const clones = new Map();\n\n  /**\n   * Recursively clones the value, extracting files.\n   * @kind function\n   * @name extractFiles~recurse\n   * @param {*} value Value to extract files from.\n   * @param {ObjectPath} path Prefix for object paths for extracted files.\n   * @param {Set} recursed Recursed arrays and objects for avoiding infinite recursion of circular references within the input value.\n   * @returns {*} Clone of the value with files replaced with `null`.\n   * @ignore\n   */\n  function recurse(value, path, recursed) {\n    let clone = value;\n\n    if (isExtractableFile(value)) {\n      clone = null;\n\n      const filePaths = files.get(value);\n\n      filePaths ? filePaths.push(path) : files.set(value, [path]);\n    } else {\n      const isList =\n        Array.isArray(value) ||\n        (typeof FileList !== 'undefined' && value instanceof FileList);\n      const isObject = value && value.constructor === Object;\n\n      if (isList || isObject) {\n        const hasClone = clones.has(value);\n\n        if (hasClone) clone = clones.get(value);\n        else {\n          clone = isList ? [] : {};\n\n          clones.set(value, clone);\n        }\n\n        if (!recursed.has(value)) {\n          const pathPrefix = path ? `${path}.` : '';\n          const recursedDeeper = new Set(recursed).add(value);\n\n          if (isList) {\n            let index = 0;\n\n            for (const item of value) {\n              const itemClone = recurse(\n                item,\n                pathPrefix + index++,\n                recursedDeeper\n              );\n\n              if (!hasClone) clone.push(itemClone);\n            }\n          } else\n            for (const key in value) {\n              const propertyClone = recurse(\n                value[key],\n                pathPrefix + key,\n                recursedDeeper\n              );\n\n              if (!hasClone) clone[key] = propertyClone;\n            }\n        }\n      }\n    }\n\n    return clone;\n  }\n\n  return {\n    clone: recurse(value, path, new Set()),\n    files,\n  };\n};\n"]},"metadata":{},"sourceType":"script"}