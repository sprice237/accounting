{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.GqlProvider = void 0;\n\nconst jsx_runtime_1 = require(\"react/jsx-runtime\");\n\nconst react_1 = require(\"react\");\n\nconst client_1 = require(\"@apollo/client\");\n\nconst apollo_upload_client_1 = require(\"apollo-upload-client\");\n\nconst context_1 = require(\"@apollo/client/link/context\");\n\nconst buildLink = (uri, token, organizationId) => client_1.ApolloLink.concat(context_1.setContext((_, prevContext) => Object.assign(Object.assign({}, prevContext), {\n  headers: Object.assign(Object.assign(Object.assign({}, prevContext.headers), token ? {\n    authorization: `Bearer ${token}`\n  } : {}), organizationId ? {\n    'x-organization-id': organizationId\n  } : {})\n})), apollo_upload_client_1.createUploadLink({\n  uri\n}));\n\nexports.GqlProvider = react_1.memo(_ref => {\n  let {\n    uri,\n    token,\n    organizationId,\n    children\n  } = _ref;\n  const [client, setClient] = react_1.useState(); // initialize `client`\n\n  react_1.useEffect(() => {\n    setClient(new client_1.ApolloClient({\n      cache: new client_1.InMemoryCache(),\n      link: buildLink(uri, token, organizationId)\n    }));\n  }, []); // update client link whenever uri, token, or organizationId changes\n\n  react_1.useEffect(() => {\n    if (!client) {\n      return;\n    }\n\n    client.setLink(buildLink(uri, token, organizationId));\n  }, [uri, token, organizationId]);\n\n  if (!client) {\n    return null;\n  }\n\n  return jsx_runtime_1.jsx(client_1.ApolloProvider, Object.assign({\n    client: client\n  }, {\n    children: children\n  }), void 0);\n});","map":{"version":3,"sources":["/home/sprice/Code/accounting/.yarn/__virtual__/@sprice237-accounting-gql-virtual-3adf6b0272/1/packages/gql/dist/GqlProvider.js"],"names":["Object","defineProperty","exports","value","GqlProvider","jsx_runtime_1","require","react_1","client_1","apollo_upload_client_1","context_1","buildLink","uri","token","organizationId","ApolloLink","concat","setContext","_","prevContext","assign","headers","authorization","createUploadLink","memo","children","client","setClient","useState","useEffect","ApolloClient","cache","InMemoryCache","link","setLink","jsx","ApolloProvider"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,WAAR,GAAsB,KAAK,CAA3B;;AACA,MAAMC,aAAa,GAAGC,OAAO,CAAC,mBAAD,CAA7B;;AACA,MAAMC,OAAO,GAAGD,OAAO,CAAC,OAAD,CAAvB;;AACA,MAAME,QAAQ,GAAGF,OAAO,CAAC,gBAAD,CAAxB;;AACA,MAAMG,sBAAsB,GAAGH,OAAO,CAAC,sBAAD,CAAtC;;AACA,MAAMI,SAAS,GAAGJ,OAAO,CAAC,6BAAD,CAAzB;;AACA,MAAMK,SAAS,GAAG,CAACC,GAAD,EAAMC,KAAN,EAAaC,cAAb,KAAgCN,QAAQ,CAACO,UAAT,CAAoBC,MAApB,CAA2BN,SAAS,CAACO,UAAV,CAAqB,CAACC,CAAD,EAAIC,WAAJ,KAAqBnB,MAAM,CAACoB,MAAP,CAAcpB,MAAM,CAACoB,MAAP,CAAc,EAAd,EAAkBD,WAAlB,CAAd,EAA8C;AAAEE,EAAAA,OAAO,EAAErB,MAAM,CAACoB,MAAP,CAAcpB,MAAM,CAACoB,MAAP,CAAcpB,MAAM,CAACoB,MAAP,CAAc,EAAd,EAAkBD,WAAW,CAACE,OAA9B,CAAd,EAAuDR,KAAK,GAAG;AAAES,IAAAA,aAAa,EAAG,UAAST,KAAM;AAAjC,GAAH,GAA0C,EAAtG,CAAd,EAA2HC,cAAc,GAAG;AAAE,yBAAqBA;AAAvB,GAAH,GAA6C,EAAtL;AAAX,CAA9C,CAA1C,CAA3B,EAA+TL,sBAAsB,CAACc,gBAAvB,CAAwC;AACrZX,EAAAA;AADqZ,CAAxC,CAA/T,CAAlD;;AAGAV,OAAO,CAACE,WAAR,GAAsBG,OAAO,CAACiB,IAAR,CAAa,QAA8C;AAAA,MAA7C;AAAEZ,IAAAA,GAAF;AAAOC,IAAAA,KAAP;AAAcC,IAAAA,cAAd;AAA8BW,IAAAA;AAA9B,GAA6C;AAC7E,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBpB,OAAO,CAACqB,QAAR,EAA5B,CAD6E,CAE7E;;AACArB,EAAAA,OAAO,CAACsB,SAAR,CAAkB,MAAM;AACpBF,IAAAA,SAAS,CAAC,IAAInB,QAAQ,CAACsB,YAAb,CAA0B;AAChCC,MAAAA,KAAK,EAAE,IAAIvB,QAAQ,CAACwB,aAAb,EADyB;AAEhCC,MAAAA,IAAI,EAAEtB,SAAS,CAACC,GAAD,EAAMC,KAAN,EAAaC,cAAb;AAFiB,KAA1B,CAAD,CAAT;AAIH,GALD,EAKG,EALH,EAH6E,CAS7E;;AACAP,EAAAA,OAAO,CAACsB,SAAR,CAAkB,MAAM;AACpB,QAAI,CAACH,MAAL,EAAa;AACT;AACH;;AACDA,IAAAA,MAAM,CAACQ,OAAP,CAAevB,SAAS,CAACC,GAAD,EAAMC,KAAN,EAAaC,cAAb,CAAxB;AACH,GALD,EAKG,CAACF,GAAD,EAAMC,KAAN,EAAaC,cAAb,CALH;;AAMA,MAAI,CAACY,MAAL,EAAa;AACT,WAAO,IAAP;AACH;;AACD,SAAOrB,aAAa,CAAC8B,GAAd,CAAkB3B,QAAQ,CAAC4B,cAA3B,EAA2CpC,MAAM,CAACoB,MAAP,CAAc;AAAEM,IAAAA,MAAM,EAAEA;AAAV,GAAd,EAAkC;AAAED,IAAAA,QAAQ,EAAEA;AAAZ,GAAlC,CAA3C,EAAsG,KAAK,CAA3G,CAAP;AACH,CApBqB,CAAtB","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.GqlProvider = void 0;\nconst jsx_runtime_1 = require(\"react/jsx-runtime\");\nconst react_1 = require(\"react\");\nconst client_1 = require(\"@apollo/client\");\nconst apollo_upload_client_1 = require(\"apollo-upload-client\");\nconst context_1 = require(\"@apollo/client/link/context\");\nconst buildLink = (uri, token, organizationId) => client_1.ApolloLink.concat(context_1.setContext((_, prevContext) => (Object.assign(Object.assign({}, prevContext), { headers: Object.assign(Object.assign(Object.assign({}, prevContext.headers), (token ? { authorization: `Bearer ${token}` } : {})), (organizationId ? { 'x-organization-id': organizationId } : {})) }))), apollo_upload_client_1.createUploadLink({\n    uri,\n}));\nexports.GqlProvider = react_1.memo(({ uri, token, organizationId, children }) => {\n    const [client, setClient] = react_1.useState();\n    // initialize `client`\n    react_1.useEffect(() => {\n        setClient(new client_1.ApolloClient({\n            cache: new client_1.InMemoryCache(),\n            link: buildLink(uri, token, organizationId),\n        }));\n    }, []);\n    // update client link whenever uri, token, or organizationId changes\n    react_1.useEffect(() => {\n        if (!client) {\n            return;\n        }\n        client.setLink(buildLink(uri, token, organizationId));\n    }, [uri, token, organizationId]);\n    if (!client) {\n        return null;\n    }\n    return jsx_runtime_1.jsx(client_1.ApolloProvider, Object.assign({ client: client }, { children: children }), void 0);\n});\n"]},"metadata":{},"sourceType":"script"}