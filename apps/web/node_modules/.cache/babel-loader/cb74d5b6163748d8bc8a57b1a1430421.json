{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  Object.defineProperty(o, k2, {\n    enumerable: true,\n    get: function () {\n      return m[k];\n    }\n  });\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.useAccountsLazyQuery = exports.useAccountsQuery = exports.AccountsDocument = exports.AccountFragmentDoc = void 0;\n\nconst client_1 = require(\"@apollo/client\");\n\nconst Apollo = __importStar(require(\"@apollo/client\"));\n\nconst defaultOptions = {};\nexports.AccountFragmentDoc = client_1.gql`\n  fragment Account on Account {\n    id\n    name\n  }\n`;\nexports.AccountsDocument = client_1.gql`\n  query Accounts {\n    accounts {\n      ...Account\n    }\n  }\n  ${exports.AccountFragmentDoc}\n`;\n/**\n * __useAccountsQuery__\n *\n * To run a query within a React component, call `useAccountsQuery` and pass it any options that fit your needs.\n * When your component renders, `useAccountsQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useAccountsQuery({\n *   variables: {\n *   },\n * });\n */\n\nfunction useAccountsQuery(baseOptions) {\n  const options = Object.assign(Object.assign({}, defaultOptions), baseOptions);\n  return Apollo.useQuery(exports.AccountsDocument, options);\n}\n\nexports.useAccountsQuery = useAccountsQuery;\n\nfunction useAccountsLazyQuery(baseOptions) {\n  const options = Object.assign(Object.assign({}, defaultOptions), baseOptions);\n  return Apollo.useLazyQuery(exports.AccountsDocument, options);\n}\n\nexports.useAccountsLazyQuery = useAccountsLazyQuery;","map":{"version":3,"sources":["/home/sprice/Code/accounting/.yarn/__virtual__/@sprice237-accounting-gql-virtual-3adf6b0272/1/packages/gql/dist/__autogenerated__/types.js"],"names":["__createBinding","Object","create","o","m","k","k2","undefined","defineProperty","enumerable","get","__setModuleDefault","v","value","__importStar","mod","__esModule","result","prototype","hasOwnProperty","call","exports","useAccountsLazyQuery","useAccountsQuery","AccountsDocument","AccountFragmentDoc","client_1","require","Apollo","defaultOptions","gql","baseOptions","options","assign","useQuery","useLazyQuery"],"mappings":"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","sourcesContent":["\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.useAccountsLazyQuery = exports.useAccountsQuery = exports.AccountsDocument = exports.AccountFragmentDoc = void 0;\nconst client_1 = require(\"@apollo/client\");\nconst Apollo = __importStar(require(\"@apollo/client\"));\nconst defaultOptions = {};\nexports.AccountFragmentDoc = client_1.gql `\n  fragment Account on Account {\n    id\n    name\n  }\n`;\nexports.AccountsDocument = client_1.gql `\n  query Accounts {\n    accounts {\n      ...Account\n    }\n  }\n  ${exports.AccountFragmentDoc}\n`;\n/**\n * __useAccountsQuery__\n *\n * To run a query within a React component, call `useAccountsQuery` and pass it any options that fit your needs.\n * When your component renders, `useAccountsQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useAccountsQuery({\n *   variables: {\n *   },\n * });\n */\nfunction useAccountsQuery(baseOptions) {\n    const options = Object.assign(Object.assign({}, defaultOptions), baseOptions);\n    return Apollo.useQuery(exports.AccountsDocument, options);\n}\nexports.useAccountsQuery = useAccountsQuery;\nfunction useAccountsLazyQuery(baseOptions) {\n    const options = Object.assign(Object.assign({}, defaultOptions), baseOptions);\n    return Apollo.useLazyQuery(exports.AccountsDocument, options);\n}\nexports.useAccountsLazyQuery = useAccountsLazyQuery;\n"]},"metadata":{},"sourceType":"script"}