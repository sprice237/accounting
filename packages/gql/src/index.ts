export * from './__autogenerated__/types';
export * from './GqlProvider';
export * from './schema';

import { QueryHookOptions, QueryResult } from '@apollo/client';
import { promises as fs } from 'fs';
import path from 'path';

export const schemaLoader = async (): Promise<string> => {
  return await fs.readFile(path.join(__dirname, '__autogenerated__', 'schema.graphql'), 'utf8');
};

export const simplifyQuery = <TData, TVariables, TField extends keyof TData>(
  method: (baseOptions: QueryHookOptions<TData, TVariables>) => QueryResult<TData, TVariables>,
  field: TField
): ((variables: TVariables) => [TData[TField] | undefined, QueryResult<TData, TVariables>]) => {
  return (variables: TVariables) => {
    const queryResult = method({ variables });
    return [queryResult.data?.[field], queryResult];
  };
};
